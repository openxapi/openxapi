components:
    schemas:
        APIError:
            description: binance API error
            properties:
                code:
                    type: integer
                msg:
                    type: string
            type: object
        AlgoCreateAlgoFuturesNewOrderTwapV1Req:
            properties:
                clientAlgoId:
                    default: ""
                    type: string
                duration:
                    format: int64
                    type: integer
                limitPrice:
                    default: ""
                    type: string
                positionSide:
                    default: ""
                    type: string
                quantity:
                    default: ""
                    type: string
                recvWindow:
                    format: int64
                    type: integer
                reduceOnly:
                    type: boolean
                side:
                    default: ""
                    type: string
                symbol:
                    default: ""
                    type: string
                timestamp:
                    format: int64
                    type: integer
            required:
                - symbol
                - side
                - quantity
                - duration
                - timestamp
            type: object
        AlgoCreateAlgoFuturesNewOrderTwapV1Resp:
            example: '{ "clientAlgoId": "65ce1630101a480b85915d7e11fd5078", "success": true, "code": 0, "msg": "OK" }'
            properties:
                clientAlgoId:
                    type: string
                code:
                    type: integer
                msg:
                    type: string
                success:
                    type: boolean
            type: object
        AlgoCreateAlgoFuturesNewOrderVpV1Req:
            properties:
                clientAlgoId:
                    default: ""
                    type: string
                limitPrice:
                    default: ""
                    type: string
                positionSide:
                    default: ""
                    type: string
                quantity:
                    default: ""
                    type: string
                recvWindow:
                    format: int64
                    type: integer
                reduceOnly:
                    type: boolean
                side:
                    default: ""
                    type: string
                symbol:
                    default: ""
                    type: string
                timestamp:
                    format: int64
                    type: integer
                urgency:
                    default: ""
                    type: string
            required:
                - symbol
                - side
                - quantity
                - urgency
                - timestamp
            type: object
        AlgoCreateAlgoFuturesNewOrderVpV1Resp:
            example: '{ "clientAlgoId": "00358ce6a268403398bd34eaa36dffe7", "success": true, "code": 0, "msg": "OK" }'
            properties:
                clientAlgoId:
                    type: string
                code:
                    type: integer
                msg:
                    type: string
                success:
                    type: boolean
            type: object
        AlgoCreateAlgoSpotNewOrderTwapV1Req:
            properties:
                clientAlgoId:
                    default: ""
                    type: string
                duration:
                    format: int64
                    type: integer
                limitPrice:
                    default: ""
                    type: string
                quantity:
                    default: ""
                    type: string
                side:
                    default: ""
                    type: string
                symbol:
                    default: ""
                    type: string
                timestamp:
                    format: int64
                    type: integer
            required:
                - symbol
                - side
                - quantity
                - duration
                - timestamp
            type: object
        AlgoCreateAlgoSpotNewOrderTwapV1Resp:
            example: '{ "clientAlgoId": "65ce1630101a480b85915d7e11fd5078", "success": true, "code": 0, "msg": "OK" }'
            properties:
                clientAlgoId:
                    type: string
                code:
                    type: integer
                msg:
                    type: string
                success:
                    type: boolean
            type: object
        AlgoDeleteAlgoFuturesOrderV1Resp:
            example: '{ "algoId": 14511, "success": true, "code": 0, "msg": "OK" }'
            properties:
                algoId:
                    format: int64
                    type: integer
                code:
                    type: integer
                msg:
                    type: string
                success:
                    type: boolean
            type: object
        AlgoDeleteAlgoSpotOrderV1Resp:
            example: '{ "algoId": 14511, "success": true, "code": 0, "msg": "OK" }'
            properties:
                algoId:
                    format: int64
                    type: integer
                code:
                    type: integer
                msg:
                    type: string
                success:
                    type: boolean
            type: object
        AlgoGetAlgoFuturesHistoricalOrdersV1Resp:
            example: '{ "total": 1, "orders": [ { "algoId": 14518, "symbol": "BNBUSDT", "side": "BUY", "positionSide": "BOTH", "totalQty": "100.00", "executedQty": "0.00", "executedAmt": "0.00000000", "avgPrice": "0.000", "clientAlgoId": "acacab56b3c44bef9f6a8f8ebd2a8408", "bookTime": 1649757019503, "endTime": 1649757088101, "algoStatus": "CANCELLED", "algoType": "VP", "urgency": "LOW" } ] }'
            properties:
                orders:
                    items:
                        properties:
                            algoId:
                                format: int64
                                type: integer
                            algoStatus:
                                type: string
                            algoType:
                                type: string
                            avgPrice:
                                type: string
                            bookTime:
                                format: int64
                                type: integer
                            clientAlgoId:
                                type: string
                            endTime:
                                format: int64
                                type: integer
                            executedAmt:
                                type: string
                            executedQty:
                                type: string
                            positionSide:
                                type: string
                            side:
                                type: string
                            symbol:
                                type: string
                            totalQty:
                                type: string
                            urgency:
                                type: string
                        type: object
                    type: array
                total:
                    type: integer
            type: object
        AlgoGetAlgoFuturesOpenOrdersV1Resp:
            example: '{ "total": 1, "orders": [ { "algoId": 14517, "symbol": "ETHUSDT", "side": "SELL", "positionSide": "SHORT", "totalQty": "5.000", "executedQty": "0.000", "executedAmt": "0.00000000", "avgPrice": "0.00", "clientAlgoId": "d7096549481642f8a0bb69e9e2e31f2e", "bookTime": 1649756817004, "endTime": 0, "algoStatus": "WORKING", "algoType": "VP", "urgency": "LOW" } ] }'
            properties:
                orders:
                    items:
                        properties:
                            algoId:
                                format: int64
                                type: integer
                            algoStatus:
                                type: string
                            algoType:
                                type: string
                            avgPrice:
                                type: string
                            bookTime:
                                format: int64
                                type: integer
                            clientAlgoId:
                                type: string
                            endTime:
                                format: int64
                                type: integer
                            executedAmt:
                                type: string
                            executedQty:
                                type: string
                            positionSide:
                                type: string
                            side:
                                type: string
                            symbol:
                                type: string
                            totalQty:
                                type: string
                            urgency:
                                type: string
                        type: object
                    type: array
                total:
                    type: integer
            type: object
        AlgoGetAlgoFuturesSubOrdersV1Resp:
            example: '{ "total": 1, "executedQty": "1.000", "executedAmt": "3229.44000000", "subOrders": [ { "algoId": 13723, "orderId": 8389765519993908929, "orderStatus": "FILLED", "executedQty": "1.000", "executedAmt": "3229.44000000", "feeAmt": "-1.61471999", "feeAsset": "USDT", "bookTime": 1649319001964, "avgPrice": "3229.44", "side": "SELL", "symbol": "ETHUSDT", "subId": 1, "timeInForce": "IMMEDIATE_OR_CANCEL", "origQty": "1.000" } ] }'
            properties:
                executedAmt:
                    type: string
                executedQty:
                    type: string
                subOrders:
                    items:
                        properties:
                            algoId:
                                format: int64
                                type: integer
                            avgPrice:
                                type: string
                            bookTime:
                                format: int64
                                type: integer
                            executedAmt:
                                type: string
                            executedQty:
                                type: string
                            feeAmt:
                                type: string
                            feeAsset:
                                type: string
                            orderId:
                                format: int64
                                type: integer
                            orderStatus:
                                type: string
                            origQty:
                                type: string
                            side:
                                type: string
                            subId:
                                format: int64
                                type: integer
                            symbol:
                                type: string
                            timeInForce:
                                type: string
                        type: object
                    type: array
                total:
                    type: integer
            type: object
        AlgoGetAlgoSpotHistoricalOrdersV1Resp:
            example: '{ "total": 1, "orders": [ { "algoId": 14518, "symbol": "BNBUSDT", "side": "BUY", "totalQty": "100.00", "executedQty": "0.00", "executedAmt": "0.00000000", "avgPrice": "0.000", "clientAlgoId": "acacab56b3c44bef9f6a8f8ebd2a8408", "bookTime": 1649757019503, "endTime": 1649757088101, "algoStatus": "CANCELLED", "algoType": "VP", "urgency": "LOW" } ] }'
            properties:
                orders:
                    items:
                        properties:
                            algoId:
                                format: int64
                                type: integer
                            algoStatus:
                                type: string
                            algoType:
                                type: string
                            avgPrice:
                                type: string
                            bookTime:
                                format: int64
                                type: integer
                            clientAlgoId:
                                type: string
                            endTime:
                                format: int64
                                type: integer
                            executedAmt:
                                type: string
                            executedQty:
                                type: string
                            side:
                                type: string
                            symbol:
                                type: string
                            totalQty:
                                type: string
                            urgency:
                                type: string
                        type: object
                    type: array
                total:
                    type: integer
            type: object
        AlgoGetAlgoSpotOpenOrdersV1Resp:
            example: '{ "total": 1, "orders": [ { "algoId": 14517, "symbol": "ETHUSDT", "side": "SELL", "totalQty": "5.000", "executedQty": "0.000", "executedAmt": "0.00000000", "avgPrice": "0.00", "clientAlgoId": "d7096549481642f8a0bb69e9e2e31f2e", "bookTime": 1649756817004, "endTime": 0, "algoStatus": "WORKING", "algoType": "TWAP", "urgency": "LOW" } ] }'
            properties:
                orders:
                    items:
                        properties:
                            algoId:
                                format: int64
                                type: integer
                            algoStatus:
                                type: string
                            algoType:
                                type: string
                            avgPrice:
                                type: string
                            bookTime:
                                format: int64
                                type: integer
                            clientAlgoId:
                                type: string
                            endTime:
                                format: int64
                                type: integer
                            executedAmt:
                                type: string
                            executedQty:
                                type: string
                            side:
                                type: string
                            symbol:
                                type: string
                            totalQty:
                                type: string
                            urgency:
                                type: string
                        type: object
                    type: array
                total:
                    type: integer
            type: object
        AlgoGetAlgoSpotSubOrdersV1Resp:
            example: '{ "total": 1, "executedQty": "1.000", "executedAmt": "3229.44000000", "subOrders": [ { "algoId": 13723, "orderId": 8389765519993908929, "orderStatus": "FILLED", "executedQty": "1.000", "executedAmt": "3229.44000000", "feeAmt": "-1.61471999", "feeAsset": "USDT", "bookTime": 1649319001964, "avgPrice": "3229.44", "side": "SELL", "symbol": "ETHUSDT", "subId": 1, "timeInForce": "IMMEDIATE_OR_CANCEL", "origQty": "1.000" } ] }'
            properties:
                executedAmt:
                    type: string
                executedQty:
                    type: string
                subOrders:
                    items:
                        properties:
                            algoId:
                                format: int64
                                type: integer
                            avgPrice:
                                type: string
                            bookTime:
                                format: int64
                                type: integer
                            executedAmt:
                                type: string
                            executedQty:
                                type: string
                            feeAmt:
                                type: string
                            feeAsset:
                                type: string
                            orderId:
                                format: int64
                                type: integer
                            orderStatus:
                                type: string
                            origQty:
                                type: string
                            side:
                                type: string
                            subId:
                                format: int64
                                type: integer
                            symbol:
                                type: string
                            timeInForce:
                                type: string
                        type: object
                    type: array
                total:
                    type: integer
            type: object
    securitySchemes:
        ApiKey:
            in: header
            name: X-MBX-APIKEY
            type: apiKey
info:
    description: OpenAPI specification for Binance exchange - Algo API
    title: Binance Algorithmic Trading API
    version: 0.1.0
openapi: 3.0.3
paths:
    /sapi/v1/algo/futures/historicalOrders:
        get:
            description: Query Historical Algo Order
            operationId: AlgoGetAlgoFuturesHistoricalOrdersV1
            parameters:
                - description: Trading symbol eg. BTCUSDT
                  in: query
                  name: symbol
                  schema:
                    default: ""
                    type: string
                - description: BUY or SELL
                  in: query
                  name: side
                  schema:
                    default: ""
                    type: string
                - description: in milliseconds  eg.1641522717552
                  in: query
                  name: startTime
                  schema:
                    format: int64
                    type: integer
                - description: in milliseconds  eg.1641522526562
                  in: query
                  name: endTime
                  schema:
                    format: int64
                    type: integer
                - description: Default is 1
                  in: query
                  name: page
                  schema:
                    type: integer
                - description: MIN 1, MAX 100; Default 100
                  in: query
                  name: pageSize
                  schema:
                    default: 100
                    type: integer
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoGetAlgoFuturesHistoricalOrdersV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Query Historical Algo Orders(USER_DATA)
            tags:
                - Future Algo
    /sapi/v1/algo/futures/newOrderTwap:
        post:
            description: |-
                Send in a Twap new order.
                Only support on USDⓈ-M Contracts.
            operationId: AlgoCreateAlgoFuturesNewOrderTwapV1
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/AlgoCreateAlgoFuturesNewOrderTwapV1Req'
                description: The request body for AlgoCreateAlgoFuturesNewOrderTwapV1
                required: true
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoCreateAlgoFuturesNewOrderTwapV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Time-Weighted Average Price(Twap) New Order(TRADE)
            tags:
                - Future Algo
    /sapi/v1/algo/futures/newOrderVp:
        post:
            description: |-
                Send in a VP new order.
                Only support on USDⓈ-M Contracts.
            operationId: AlgoCreateAlgoFuturesNewOrderVpV1
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/AlgoCreateAlgoFuturesNewOrderVpV1Req'
                description: The request body for AlgoCreateAlgoFuturesNewOrderVpV1
                required: true
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoCreateAlgoFuturesNewOrderVpV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Volume Participation(VP) New Order (TRADE)
            tags:
                - Future Algo
    /sapi/v1/algo/futures/openOrders:
        get:
            description: Query Current Algo Open Orders
            operationId: AlgoGetAlgoFuturesOpenOrdersV1
            parameters:
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoGetAlgoFuturesOpenOrdersV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Query Current Algo Open Orders(USER_DATA)
            tags:
                - Future Algo
    /sapi/v1/algo/futures/order:
        delete:
            description: Cancel an active order.
            operationId: AlgoDeleteAlgoFuturesOrderV1
            parameters:
                - description: eg. 14511
                  in: query
                  name: algoId
                  required: true
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoDeleteAlgoFuturesOrderV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Cancel Algo Order(TRADE)
            tags:
                - Future Algo
    /sapi/v1/algo/futures/subOrders:
        get:
            description: Get respective sub orders for a specified algoId
            operationId: AlgoGetAlgoFuturesSubOrdersV1
            parameters:
                - in: query
                  name: algoId
                  required: true
                  schema:
                    format: int64
                    type: integer
                - description: Default is 1
                  in: query
                  name: page
                  schema:
                    type: integer
                - description: MIN 1, MAX 100; Default 100
                  in: query
                  name: pageSize
                  schema:
                    default: 100
                    type: integer
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoGetAlgoFuturesSubOrdersV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Query Sub Orders(USER_DATA)
            tags:
                - Future Algo
    /sapi/v1/algo/spot/historicalOrders:
        get:
            description: Get all historical SPOT TWAP orders
            operationId: AlgoGetAlgoSpotHistoricalOrdersV1
            parameters:
                - description: Trading symbol eg. BTCUSDT
                  in: query
                  name: symbol
                  schema:
                    default: ""
                    type: string
                - description: BUY or SELL
                  in: query
                  name: side
                  schema:
                    default: ""
                    type: string
                - description: in milliseconds  eg.1641522717552
                  in: query
                  name: startTime
                  schema:
                    format: int64
                    type: integer
                - description: in milliseconds  eg.1641522526562
                  in: query
                  name: endTime
                  schema:
                    format: int64
                    type: integer
                - description: Default is 1
                  in: query
                  name: page
                  schema:
                    type: integer
                - description: MIN 1, MAX 100; Default 100
                  in: query
                  name: pageSize
                  schema:
                    default: 100
                    type: integer
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoGetAlgoSpotHistoricalOrdersV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Query Historical Algo Orders(USER_DATA)
            tags:
                - Spot Algo
    /sapi/v1/algo/spot/newOrderTwap:
        post:
            description: Place a new spot TWAP order with Algo service.
            operationId: AlgoCreateAlgoSpotNewOrderTwapV1
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/AlgoCreateAlgoSpotNewOrderTwapV1Req'
                description: The request body for AlgoCreateAlgoSpotNewOrderTwapV1
                required: true
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoCreateAlgoSpotNewOrderTwapV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Time-Weighted Average Price(Twap) New Order(TRADE)
            tags:
                - Spot Algo
    /sapi/v1/algo/spot/openOrders:
        get:
            description: Get all open SPOT TWAP orders
            operationId: AlgoGetAlgoSpotOpenOrdersV1
            parameters:
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoGetAlgoSpotOpenOrdersV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Query Current Algo Open Orders(USER_DATA)
            tags:
                - Spot Algo
    /sapi/v1/algo/spot/order:
        delete:
            description: Cancel an open TWAP order
            operationId: AlgoDeleteAlgoSpotOrderV1
            parameters:
                - description: eg. 14511
                  in: query
                  name: algoId
                  required: true
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoDeleteAlgoSpotOrderV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Cancel Algo Order(TRADE)
            tags:
                - Spot Algo
    /sapi/v1/algo/spot/subOrders:
        get:
            description: Get respective sub orders for a specified algoId
            operationId: AlgoGetAlgoSpotSubOrdersV1
            parameters:
                - in: query
                  name: algoId
                  required: true
                  schema:
                    format: int64
                    type: integer
                - description: Default is 1
                  in: query
                  name: page
                  schema:
                    type: integer
                - description: MIN 1, MAX 100; Default 100
                  in: query
                  name: pageSize
                  schema:
                    default: 100
                    type: integer
                - in: query
                  name: recvWindow
                  schema:
                    format: int64
                    type: integer
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                4XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Client Error
                5XX:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/APIError'
                    description: Server Error
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlgoGetAlgoSpotSubOrdersV1Resp'
                    description: Successful operation
            security:
                - ApiKey: []
            summary: Query Sub Orders(USER_DATA)
            tags:
                - Spot Algo
servers:
    - description: Binance Algo API Server
      url: https://api.binance.com
    - description: Binance Algo API Server
      url: https://api1.binance.com
    - description: Binance Algo API Server
      url: https://api2.binance.com
    - description: Binance Algo API Server
      url: https://api3.binance.com
    - description: Binance Algo API Server
      url: https://api4.binance.com

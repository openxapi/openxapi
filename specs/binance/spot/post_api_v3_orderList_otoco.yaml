components:
    schemas:
        SpotCreateOrderListOtocoV3Req:
            type: object
            properties:
                symbol:
                    default: ""
                    type: string
                listClientOrderId:
                    description: Arbitrary unique ID among open order lists. Automatically generated if not sent. <br/>A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired. <br/> `listClientOrderId` is distinct from the `workingClientOrderId`, `pendingAboveClientOrderId`, and the `pendingBelowClientOrderId`.
                    default: ""
                    type: string
                newOrderRespType:
                    description: 'Format of the JSON response. Supported values: <a href="/docs/binance-spot-api-docs/rest-api/enums.md#orderresponsetype">Order Response Type</a>'
                    default: ""
                    type: string
                selfTradePreventionMode:
                    description: 'The allowed values are dependent on what is configured on the symbol. Supported values: <a href="/docs/binance-spot-api-docs/rest-api/enums.md#stpmodes">STP Modes</a>'
                    default: ""
                    type: string
                workingType:
                    description: 'Supported values: `LIMIT`, `LIMIT_MAKER`'
                    default: "LIMIT"
                    enum:
                        - LIMIT
                        - LIMIT_MAKER
                    type: string
                workingSide:
                    description: 'Supported values: <a href="/docs/binance-spot-api-docs/rest-api/enums.md#side">Order side</a>'
                    default: ""
                    type: string
                workingClientOrderId:
                    description: Arbitrary unique ID among open orders for the working order.<br/> Automatically generated if not sent.
                    default: ""
                    type: string
                workingPrice:
                    type: number
                workingQuantity:
                    type: number
                workingIcebergQty:
                    description: This can only be used if `workingTimeInForce` is `GTC`.
                    type: number
                workingTimeInForce:
                    description: 'Supported values: <a href="/docs/binance-spot-api-docs/rest-api/enums.md#timeinforce">Time In Force</a>'
                    default: ""
                    type: string
                workingStrategyId:
                    description: Arbitrary numeric value identifying the working order within an order strategy.
                    type: integer
                workingStrategyType:
                    description: Arbitrary numeric value identifying the working order strategy. <br/> Values smaller than 1000000 are reserved and cannot be used.
                    type: integer
                pendingSide:
                    description: 'Supported values: <a href="/docs/binance-spot-api-docs/rest-api/enums.md#side">Order side</a>'
                    default: ""
                    type: string
                pendingQuantity:
                    type: number
                pendingAboveType:
                    description: 'Supported values: `STOP_LOSS_LIMIT`, `STOP_LOSS`, `LIMIT_MAKER`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT`'
                    default: "STOP_LOSS_LIMIT"
                    enum:
                        - STOP_LOSS_LIMIT
                        - STOP_LOSS
                        - LIMIT_MAKER
                        - TAKE_PROFIT
                        - TAKE_PROFIT_LIMIT
                    type: string
                pendingAboveClientOrderId:
                    description: Arbitrary unique ID among open orders for the pending above order.<br/> Automatically generated if not sent.
                    default: ""
                    type: string
                pendingAbovePrice:
                    description: Can be used if `pendingAboveType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
                    type: number
                pendingAboveStopPrice:
                    description: Can be used if `pendingAboveType` is `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT`
                    type: number
                pendingAboveTrailingDelta:
                    description: See <a href="/docs/binance-spot-api-docs/faqs/trailing-stop-faq">Trailing Stop FAQ</a>
                    type: number
                pendingAboveIcebergQty:
                    description: This can only be used if `pendingAboveTimeInForce` is `GTC` or if `pendingAboveType` is `LIMIT_MAKER`.
                    type: number
                pendingAboveTimeInForce:
                    default: ""
                    type: string
                pendingAboveStrategyId:
                    description: Arbitrary numeric value identifying the pending above order within an order strategy.
                    type: integer
                pendingAboveStrategyType:
                    description: Arbitrary numeric value identifying the pending above order strategy. <br/> Values smaller than 1000000 are reserved and cannot be used.
                    type: integer
                pendingBelowType:
                    description: 'Supported values: `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`,`TAKE_PROFIT_LIMIT`'
                    default: "STOP_LOSS"
                    enum:
                        - STOP_LOSS
                        - STOP_LOSS_LIMIT
                        - TAKE_PROFIT
                        - TAKE_PROFIT_LIMIT
                    type: string
                pendingBelowClientOrderId:
                    description: Arbitrary unique ID among open orders for the pending below order.<br/> Automatically generated if not sent.
                    default: ""
                    type: string
                pendingBelowPrice:
                    description: Can be used if `pendingBelowType` is `STOP_LOSS_LIMIT` or `TAKE_PROFIT_LIMIT` to specify limit price
                    type: number
                pendingBelowStopPrice:
                    description: Can be used if `pendingBelowType` is `STOP_LOSS`, `STOP_LOSS_LIMIT, TAKE_PROFIT or TAKE_PROFIT_LIMIT`. <br/> Either `pendingBelowStopPrice` or `pendingBelowTrailingDelta` or both, must be specified.
                    type: number
                pendingBelowTrailingDelta:
                    type: number
                pendingBelowIcebergQty:
                    description: This can only be used if `pendingBelowTimeInForce` is `GTC`, or if `pendingBelowType` is `LIMIT_MAKER`.
                    type: number
                pendingBelowTimeInForce:
                    description: 'Supported values: <a href="/docs/binance-spot-api-docs/enums#timeinforce">Time In Force</a>'
                    default: ""
                    type: string
                pendingBelowStrategyId:
                    description: Arbitrary numeric value identifying the pending below order within an order strategy.
                    type: integer
                pendingBelowStrategyType:
                    description: Arbitrary numeric value identifying the pending below order strategy. <br/> Values smaller than 1000000 are reserved and cannot be used.
                    type: integer
                recvWindow:
                    description: The value cannot be greater than `60000`.
                    type: integer
                timestamp:
                    type: integer
            required:
                - symbol
                - workingType
                - workingSide
                - workingPrice
                - workingQuantity
                - pendingSide
                - pendingQuantity
                - pendingAboveType
                - timestamp
                
        SpotCreateOrderListOtocoV3Resp:
            example: '{    "orderListId": 1,    "contingencyType": "OTO",    "listStatusType": "EXEC_STARTED",    "listOrderStatus": "EXECUTING",    "listClientOrderId": "RumwQpBaDctlUu5jyG5rs0",    "transactionTime": 1712291372842,    "symbol": "ABCDEF",    "orders": [        {            "symbol": "LTCBTC",            "orderId": 6,            "clientOrderId": "fM9Y4m23IFJVCQmIrlUmMK"        },        {            "symbol": "LTCBTC",            "orderId": 7,            "clientOrderId": "6pcQbFIzTXGZQ1e2MkGDq4"        },        {            "symbol": "LTCBTC",            "orderId": 8,            "clientOrderId": "r4JMv9cwAYYUwwBZfbussx"        }    ],    "orderReports": [        {            "symbol": "LTCBTC",            "orderId": 6,            "orderListId": 1,            "clientOrderId": "fM9Y4m23IFJVCQmIrlUmMK",            "transactTime": 1712291372842,            "price": "1.00000000",            "origQty": "1.00000000",            "executedQty": "0.00000000",            "origQuoteOrderQty": "0.000000",            "cummulativeQuoteQty": "0.00000000",            "status": "NEW",            "timeInForce": "GTC",            "type": "LIMIT",            "side": "SELL",            "workingTime": 1712291372842,            "selfTradePreventionMode": "NONE"        },        {            "symbol": "LTCBTC",            "orderId": 7,            "orderListId": 1,            "clientOrderId": "6pcQbFIzTXGZQ1e2MkGDq4",            "transactTime": 1712291372842,            "price": "1.00000000",            "origQty": "5.00000000",            "executedQty": "0.00000000",            "origQuoteOrderQty": "0.000000",            "cummulativeQuoteQty": "0.00000000",            "status": "PENDING_NEW",            "timeInForce": "IOC",            "type": "STOP_LOSS_LIMIT",            "side": "BUY",            "stopPrice": "6.00000000",            "workingTime": -1,            "selfTradePreventionMode": "NONE"        },        {            "symbol": "LTCBTC",            "orderId": 8,            "orderListId": 1,            "clientOrderId": "r4JMv9cwAYYUwwBZfbussx",            "transactTime": 1712291372842,            "price": "3.00000000",            "origQty": "5.00000000",            "executedQty": "0.00000000",            "origQuoteOrderQty": "0.000000",            "cummulativeQuoteQty": "0.00000000",            "status": "PENDING_NEW",            "timeInForce": "GTC",            "type": "LIMIT_MAKER",            "side": "BUY",            "workingTime": -1,            "selfTradePreventionMode": "NONE"        }    ]}'
            properties:
                contingencyType:
                    type: string
                listClientOrderId:
                    type: string
                listOrderStatus:
                    type: string
                listStatusType:
                    type: string
                orderListId:
                    type: number
                orderReports:
                    items:
                        properties:
                            clientOrderId:
                                type: string
                            cummulativeQuoteQty:
                                type: string
                            executedQty:
                                type: string
                            orderId:
                                type: number
                            orderListId:
                                type: number
                            origQty:
                                type: string
                            origQuoteOrderQty:
                                type: string
                            price:
                                type: string
                            selfTradePreventionMode:
                                type: string
                            side:
                                type: string
                            status:
                                type: string
                            symbol:
                                type: string
                            timeInForce:
                                type: string
                            transactTime:
                                type: number
                            type:
                                type: string
                            workingTime:
                                type: number
                        type: object
                    type: array
                orders:
                    items:
                        properties:
                            clientOrderId:
                                type: string
                            orderId:
                                type: number
                            symbol:
                                type: string
                        type: object
                    type: array
                symbol:
                    type: string
                transactionTime:
                    type: number
            type: object
info:
    title: ""
    version: ""
openapi: ""
paths:
    /api/v3/orderList/otoco:
        post:
            description: |-
                Place an OTOCO.
                - An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
                - The first order is called the working order and must be LIMIT or LIMIT_MAKER. Initially, only the working order goes on the order book.

                The behavior of the working order is the same as the OTO.
                - OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The pending orders are only placed on the order book when the working order gets fully filled.

                The rules of the pending above and pending below follow the same rules as the Order list OCO.
                - OTOCOs add 3 orders against the unfilled order count, EXCHANGE_MAX_NUM_ORDERS filter, and MAX_NUM_ORDERS filter.
            operationId: SpotCreateOrderListOtocoV3
            requestBody:
                content:
                    application/www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/SpotCreateOrderListOtocoV3Req'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpotCreateOrderListOtocoV3Resp'
                    description: Successful operation
            summary: New Order list - OTOCO (TRADE)
            tags:
                - Trading
                - V3

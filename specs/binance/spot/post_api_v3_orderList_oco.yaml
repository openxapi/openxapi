components:
    schemas:
        SpotCreateOrderListOcoV3Resp:
            example: '{    "orderListId": 1,    "contingencyType": "OCO",    "listStatusType": "EXEC_STARTED",    "listOrderStatus": "EXECUTING",    "listClientOrderId": "lH1YDkuQKWiXVXHPSKYEIp",    "transactionTime": 1710485608839,    "symbol": "LTCBTC",    "orders": [        {            "symbol": "LTCBTC",            "orderId": 10,            "clientOrderId": "44nZvqpemY7sVYgPYbvPih"        },        {            "symbol": "LTCBTC",            "orderId": 11,            "clientOrderId": "NuMp0nVYnciDiFmVqfpBqK"        }    ],    "orderReports": [        {            "symbol": "LTCBTC",            "orderId": 10,            "orderListId": 1,            "clientOrderId": "44nZvqpemY7sVYgPYbvPih",            "transactTime": 1710485608839,            "price": "1.00000000",            "origQty": "5.00000000",            "executedQty": "0.00000000",            "origQuoteOrderQty": "0.000000",            "cummulativeQuoteQty": "0.00000000",            "status": "NEW",            "timeInForce": "GTC",            "type": "STOP_LOSS_LIMIT",            "side": "SELL",            "stopPrice": "1.00000000",            "workingTime": -1,            "icebergQty": "1.00000000",            "selfTradePreventionMode": "NONE"        },        {            "symbol": "LTCBTC",            "orderId": 11,            "orderListId": 1,            "clientOrderId": "NuMp0nVYnciDiFmVqfpBqK",            "transactTime": 1710485608839,            "price": "3.00000000",            "origQty": "5.00000000",            "executedQty": "0.00000000",            "origQuoteOrderQty": "0.000000",            "cummulativeQuoteQty": "0.00000000",            "status": "NEW",            "timeInForce": "GTC",            "type": "LIMIT_MAKER",            "side": "SELL",            "workingTime": 1710485608839,            "selfTradePreventionMode": "NONE"        }    ]}'
            properties:
                contingencyType:
                    type: string
                listClientOrderId:
                    type: string
                listOrderStatus:
                    type: string
                listStatusType:
                    type: string
                orderListId:
                    type: number
                orderReports:
                    items:
                        properties:
                            clientOrderId:
                                type: string
                            cummulativeQuoteQty:
                                type: string
                            executedQty:
                                type: string
                            icebergQty:
                                type: string
                            orderId:
                                type: number
                            orderListId:
                                type: number
                            origQty:
                                type: string
                            origQuoteOrderQty:
                                type: string
                            price:
                                type: string
                            selfTradePreventionMode:
                                type: string
                            side:
                                type: string
                            status:
                                type: string
                            stopPrice:
                                type: string
                            symbol:
                                type: string
                            timeInForce:
                                type: string
                            transactTime:
                                type: number
                            type:
                                type: string
                            workingTime:
                                type: number
                        type: object
                    type: array
                orders:
                    items:
                        properties:
                            clientOrderId:
                                type: string
                            orderId:
                                type: number
                            symbol:
                                type: string
                        type: object
                    type: array
                symbol:
                    type: string
                transactionTime:
                    type: number
            type: object
info:
    title: ""
    version: ""
openapi: ""
paths:
    /api/v3/orderList/oco:
        post:
            description: |-
                Send in an one-cancels-the-other (OCO) pair, where activation of one order immediately cancels the other.
                - An OCO has 2 orders called the above order and below order.
                - One of the orders must be a LIMIT_MAKER/TAKE_PROFIT/TAKE_PROFIT_LIMIT order and the other must be STOP_LOSS or STOP_LOSS_LIMIT order.
                - Price restrictions

                If the OCO is on the SELL side:

                LIMIT_MAKER/TAKE_PROFIT_LIMIT price > Last Traded Price >  STOP_LOSS/STOP_LOSS_LIMIT stopPrice
                TAKE_PROFIT stopPrice > Last Traded Price > STOP_LOSS/STOP_LOSS_LIMIT stopPrice


                If the OCO is on the BUY side:

                LIMIT_MAKER/TAKE_PROFIT_LIMIT price < Last Traded Price < stopPrice
                TAKE_PROFIT stopPrice < Last Traded Price < STOP_LOSS/STOP_LOSS_LIMIT stopPrice
                - OCOs add 2 orders to the unfilled order count, EXCHANGE_MAX_ORDERS filter, and the MAX_NUM_ORDERS filter.
            operationId: SpotCreateOrderListOcoV3
            parameters:
                - in: query
                  name: symbol
                  required: true
                  schema:
                    default: ""
                    type: string
                - description: Arbitrary unique ID among open order lists. Automatically generated if not sent. <br/> A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired. <br/> `listClientOrderId` is distinct from the `aboveClientOrderId` and the `belowCLientOrderId`.
                  in: query
                  name: listClientOrderId
                  schema:
                    default: ""
                    type: string
                - description: '`BUY` or `SELL`'
                  in: query
                  name: side
                  required: true
                  schema:
                    default: ""
                    type: string
                - description: Quantity for both orders of the order list.
                  in: query
                  name: quantity
                  required: true
                  schema:
                    type: number
                - description: 'Supported values: `STOP_LOSS_LIMIT`, `STOP_LOSS`, `LIMIT_MAKER`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT`'
                  in: query
                  name: aboveType
                  required: true
                  schema:
                    default: "STOP_LOSS_LIMIT"
                    enum:
                        - STOP_LOSS_LIMIT
                        - STOP_LOSS
                        - LIMIT_MAKER
                        - TAKE_PROFIT
                        - TAKE_PROFIT_LIMIT
                    type: string
                - description: Arbitrary unique ID among open orders for the above order. Automatically generated if not sent
                  in: query
                  name: aboveClientOrderId
                  schema:
                    default: ""
                    type: string
                - description: Note that this can only be used if `aboveTimeInForce` is `GTC`.
                  in: query
                  name: aboveIcebergQty
                  schema:
                    type: integer
                - description: Can be used if `aboveType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
                  in: query
                  name: abovePrice
                  schema:
                    type: number
                - description: Can be used if `aboveType` is `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`, `TAKE_PROFIT_LIMIT` <br/>Either `aboveStopPrice` or `aboveTrailingDelta` or both, must be specified.
                  in: query
                  name: aboveStopPrice
                  schema:
                    type: number
                - description: See <a href="/docs/binance-spot-api-docs/faqs/trailing-stop-faq">Trailing Stop order FAQ</a>.
                  in: query
                  name: aboveTrailingDelta
                  schema:
                    type: integer
                - description: Required if `aboveType` is `STOP_LOSS_LIMIT` or `TAKE_PROFIT_LIMIT`
                  in: query
                  name: aboveTimeInForce
                  schema:
                    type: number
                - description: Arbitrary numeric value identifying the above order within an order strategy.
                  in: query
                  name: aboveStrategyId
                  schema:
                    type: integer
                - description: Arbitrary numeric value identifying the above order strategy. <br/>Values smaller than 1000000 are reserved and cannot be used.
                  in: query
                  name: aboveStrategyType
                  schema:
                    type: integer
                - description: 'Supported values: `STOP_LOSS`, `STOP_LOSS_LIMIT`, `TAKE_PROFIT`,`TAKE_PROFIT_LIMIT`'
                  in: query
                  name: belowType
                  required: true
                  schema:
                    default: "STOP_LOSS"
                    enum:
                        - STOP_LOSS
                        - STOP_LOSS_LIMIT
                        - TAKE_PROFIT
                        - TAKE_PROFIT_LIMIT
                    type: string
                - description: Arbitrary unique ID among open orders for the below order. Automatically generated if not sent
                  in: query
                  name: belowClientOrderId
                  schema:
                    default: ""
                    type: string
                - description: Note that this can only be used if `belowTimeInForce` is `GTC`.
                  in: query
                  name: belowIcebergQty
                  schema:
                    type: integer
                - description: Can be used if `belowType` is `STOP_LOSS_LIMIT` , `LIMIT_MAKER`, or `TAKE_PROFIT_LIMIT` to specify the limit price.
                  in: query
                  name: belowPrice
                  schema:
                    type: number
                - description: Can be used if `belowType` is `STOP_LOSS`, `STOP_LOSS_LIMIT, TAKE_PROFIT` or `TAKE_PROFIT_LIMIT` <br/>Either belowStopPrice or belowTrailingDelta or both, must be specified.
                  in: query
                  name: belowStopPrice
                  schema:
                    type: number
                - description: See <a href="/docs/binance-spot-api-docs/faqs/trailing-stop-faq">Trailing Stop order FAQ</a>.
                  in: query
                  name: belowTrailingDelta
                  schema:
                    type: integer
                - description: Required if `belowType` is `STOP_LOSS_LIMIT` or `TAKE_PROFIT_LIMIT`.
                  in: query
                  name: belowTimeInForce
                  schema:
                    default: ""
                    type: string
                - description: Arbitrary numeric value identifying the below order within an order strategy.
                  in: query
                  name: belowStrategyId
                  schema:
                    type: integer
                - description: Arbitrary numeric value identifying the below order strategy. <br/>Values smaller than 1000000 are reserved and cannot be used.
                  in: query
                  name: belowStrategyType
                  schema:
                    type: integer
                - description: 'Select response format: `ACK`, `RESULT`, `FULL`'
                  in: query
                  name: newOrderRespType
                  schema:
                    default: "FULL"
                    enum:
                        - ACK
                        - RESULT
                        - FULL
                    type: string
                - description: 'The allowed enums is dependent on what is configured on the symbol. Supported values: <a href="/docs/binance-spot-api-docs/rest-api/enums.md#stpmodes">STP Modes</a>'
                  in: query
                  name: selfTradePreventionMode
                  schema:
                    default: ""
                    type: string
                - description: The value cannot be greater than `60000`.
                  in: query
                  name: recvWindow
                  schema:
                    type: integer
                    maximum: 60000
                - in: query
                  name: timestamp
                  required: true
                  schema:
                    type: integer
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpotCreateOrderListOcoV3Resp'
                    description: Successful operation
            summary: New Order list - OCO (TRADE)
            tags:
                - Trading
                - V3

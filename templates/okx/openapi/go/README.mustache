# Go API client for {{packageName}}

{{#appDescriptionWithNewLines}}
{{{.}}}
{{/appDescriptionWithNewLines}}

## Overview
This API client was generated by the [OpenAPI Generator](https://openapi-generator.tech) project.

Please do not edit the generated code manually, but rather regenerate it from [OpenXAPI](https://github.com/openxapi/openxapi).

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Generator version: {{generatorVersion}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Installation

Put the package under your project folder and add the following in import:

```go
import (
    {{packageName}} "{{gitHost}}/{{gitUserId}}/{{gitRepoId}}{{#isGoSubmodule}}/{{packageName}}{{/isGoSubmodule}}"
)
```

To use a proxy, set the environment variable `HTTP_PROXY`:

```go
os.Setenv("HTTP_PROXY", "http://proxy_name:proxy_port")
```

## Usage

Example

```go
    package main

    import (
        "context"
        "fmt"

        okx "github.com/openxapi/okx-go/rest"
    )

    func main() {
        conf := okx.NewConfiguration()
        client := okx.NewAPIClient(conf)
        ctx := context.Background()

        data, resp, err := client.PublicDataAPI.GetMarketExchangeRateV5(ctx).Execute()
        if err != nil {
            fmt.Printf("failed to call API: %v\n, error type: %T\n", err, err)
            e, ok := err.(*okx.GenericOpenAPIError)
            if ok {
                fmt.Printf("API error code: %v, msg: %v\n", e.Model().Code, e.Model().Msg)
            }
        }
        fmt.Printf("%+v\n", data)
        fmt.Printf("%+v\n", resp)
    }
```

## Authentication

The API client supports HMAC authentication.

The authentication is calculated per request, so you can use different keys for different requests.

### HMAC

Example

```go
    import (
	"context"
	"fmt"
	"os"

	okx "github.com/openxapi/okx-go/rest"
    )

    func main() {
        conf := okx.NewConfiguration()
        client := okx.NewAPIClient(conf)
        ctx := context.Background()

        // get API key from env
        apiKey := os.Getenv("OKX_API_KEY")
        passPhrase := os.Getenv("OKX_PASS_PHRASE")
        auth := okx.NewAuth(apiKey, passPhrase)
        auth.SetSecretKey(os.Getenv("OKX_SECRET_KEY"))
        ctx, err := auth.ContextWithValue(ctx)
        if err != nil {
            fmt.Println(err)
        }

        data, resp, err := client.BlockTradingAPI.GetRfqCounterpartiesV5(ctx).Execute()
        if err != nil {
            fmt.Printf("failed to call API: %v\n, error type: %T\n", err, err)
            e, ok := err.(*okx.GenericOpenAPIError)
            if ok {
                fmt.Printf("API error code: %v, msg: %v\n", e.Model().Code, e.Model().Msg)
            }
        }
        fmt.Printf("%+v\n", data)
        fmt.Printf("%+v\n", resp)
    }
```

## Configuration

### Configuration of Server URL

Default configuration comes with `Servers` field that contains server objects as defined in the OpenAPI specification.

### Select Server Configuration

For using other server than the one defined on index 0 set context value `{{packageName}}.ContextServerIndex` of type `int`.

```go
ctx := context.WithValue(context.Background(), {{packageName}}.ContextServerIndex, 1)
```

### URLs Configuration per Operation

Each operation can use different server URL defined using `OperationServers` map in the `Configuration`.
An operation is uniquely identified by `"{classname}Service.{nickname}"` string.
Similar rules for overriding default operation server index and variables applies by using `{{packageName}}.ContextOperationServerIndices` and `{{packageName}}.ContextOperationServerVariables` context maps.

```go
ctx := context.WithValue(context.Background(), {{packageName}}.ContextOperationServerIndices, map[string]int{
    "{classname}Service.{nickname}": 2,
})
ctx = context.WithValue(context.Background(), {{packageName}}.ContextOperationServerVariables, map[string]map[string]string{
    "{classname}Service.{nickname}": {
        "port": "8443",
    },
})
```

## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation For Models

{{#models}}{{#model}} - [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}

## Documentation for Utility Methods

Due to the fact that model structure members are all pointers, this package contains
a number of utility functions to easily obtain pointers to values of basic types.
Each of these functions takes a value of the given basic type and returns a pointer to it:

* `PtrBool`
* `PtrInt`
* `PtrInt32`
* `PtrInt64`
* `PtrFloat`
* `PtrFloat32`
* `PtrFloat64`
* `PtrString`
* `PtrTime`

## Author

{{#apiInfo}}{{#apis}}{{#-last}}{{infoEmail}}
{{/-last}}{{/apis}}{{/apiInfo}}

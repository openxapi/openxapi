/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import { BinanceAuth } from './signing';

/**
 * Interface defining the configuration options for the API client.
 * @export
 * @interface ConfigurationParameters
 */
export interface ConfigurationParameters {
    /**
     * Override base path.
     * @type {string}
     * @memberof ConfigurationParameters
     */
    basePath?: string;
    /**
     * Override server index.
     * @type {number}
     * @memberof ConfigurationParameters
     */
    serverIndex?: number;
    /**
     * Base options for axios calls.
     * @type {any}
     * @memberof ConfigurationParameters
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data requests.
     * @type {new () => any}
     * @memberof ConfigurationParameters
     */
    formDataCtor?: new () => any;
    /**
     * Binance authentication handler instance.
     * This is the recommended way to authenticate with Binance API using either HMAC, RSA, or ED25519 signing.
     * 
     * @example
     * ```typescript
     * // HMAC Authentication
     * const auth = new BinanceAuth(
     *   apiKey: 'your-api-key',
     *   secretKey: 'your-secret-key'
     * );
     * 
     * // RSA Authentication
     * const auth = new BinanceAuth(
     *   apiKey: 'your-api-key',
     *   privateKeyPath: 'path/to/private-key.pem',
     *   passphrase: 'optional-passphrase'
     * );
     * 
     * // ED25519 Authentication
     * const auth = new BinanceAuth(
     *   apiKey: 'your-api-key',
     *   privateKeyPath: 'path/to/ed25519-key.pem',
     *   passphrase: 'optional-passphrase'
     * );
     * ```
     * 
     * @type {BinanceAuth}
     * @memberof ConfigurationParameters
     */
    auth?: BinanceAuth;
}

/**
 * Configuration class for the API client.
 * @export
 * @class Configuration
 */
export class Configuration {
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    /**
     * Binance authentication handler instance
     * 
     * @type {BinanceAuth}
     * @memberof Configuration
     */
    auth?: BinanceAuth;

    constructor(param: ConfigurationParameters = {}) {
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.auth = param.auth;
        this.baseOptions = {
            ...param.baseOptions,
            headers: {
                {{#httpUserAgent}}
                'User-Agent': "{{httpUserAgent}}",
                {{/httpUserAgent}}
                ...param.baseOptions?.headers,
            },
        };
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
